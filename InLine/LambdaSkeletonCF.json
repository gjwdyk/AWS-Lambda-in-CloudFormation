{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Lambda Function creation within CloudFormation Template",
  "Parameters": {
    "UserInput": {
      "Description": "A User Input to the Lambda Function",
      "Type": "String"
    }
  },
  "Metadata": {
  },
  "Resources": {
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "lambdalogtocloudwatch",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          }
        ]
      }
    },

    "RandomWordInterface": {
      "Type": "Custom::RandomWordInterface",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : ["RandomWordFunction", "Arn"] },
        "SystemInput": { "Ref": "AWS::Region" },
        "UserInput": { "Ref": "UserInput" }
      }
    },

    "RandomWordFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "var response = require('cfn-response');",
                "exports.handler = function(event, context) {",
                "  var responseData = {};",
                "  if (event.RequestType == 'Delete') {",
                "    //response.send(event, context, response.SUCCESS);",
                "    responseData[\"Reason\"] = \"CloudFormation Delete Request\";",
                "    response.send(event, context, response.SUCCESS, responseData);",
                "    return;",
                "  }",
                "  //var responseStatus = \"SUCCESS\";",
                "  responseData[\"SystemInput\"] = event.ResourceProperties.SystemInput;",
                "  responseData[\"UserInput\"] = event.ResourceProperties.UserInput;",
                "  responseData[\"Reason\"] = \"Called to Generate Random Word\";",
                "  responseData[\"Result\"] = \"Result Word\";",
                "  response.send(event, context, response.SUCCESS, responseData);",
                "};"
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Runtime": "nodejs14.x",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        }
      }
    }
  },
  "Outputs": {
    "LambdaFunction": {
      "Value": { "Ref": "RandomWordFunction" },
      "Description": "Look at \"CloudWatch > Log Groups > /aws/lambda/[this-value-reference]\" for the logs of this Lambda Function"
    },
    "SystemInput": {
      "Value": { "Fn::GetAtt": [ "RandomWordInterface", "SystemInput" ] },
      "Description": "One of the inputs into the Lambda Function (labelled as \"SystemInput\", value is AWS Region)"
    },
    "UserInput": {
      "Value": { "Fn::GetAtt": [ "RandomWordInterface", "UserInput" ] },
      "Description": "One of the inputs into the Lambda Function (labelled as \"UserInput\")"
    },
    "Reason": {
      "Value": { "Fn::GetAtt": [ "RandomWordInterface", "Reason" ] },
      "Description": "One of the results of the Lambda Function (labelled as \"Reason\")"
    },
    "Result": {
      "Value": { "Fn::GetAtt": [ "RandomWordInterface", "Result" ] },
      "Description": "The other result of the Lambda Function (labelled as \"Result\")"
    }
  }
}