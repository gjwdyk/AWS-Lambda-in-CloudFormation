{
 "AWSTemplateFormatVersion": "2010-09-09",
 "Description": "Lambda Function creation within CloudFormation Template",

 "Mappings": {
  "IPAddress": {
   "VPC": {
    "PreFix": "10.1"
   },
   "Nodes": {
    "InFix": "10"
   },
   "Gateway": {
    "InFix": "1"
   }
  }
 },

 "Parameters": {
  "TagPreFix": {
   "Type": "String",
   "Default": "CF",
   "AllowedPattern": "^[a-zA-Z][0-9a-zA-Z]*$",
   "ConstraintDescription": "Kindly check the TagPreFix parameter input. Only Alphanumeric characters allowed.",
   "Description": "Prefix to be given to all possible resources created by this stack-template."
  },
  "TagOwnerEmail": {
   "Type": "String",
   "Default": "john.doe@domain.tld",
   "AllowedPattern": "^[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$",
   "ConstraintDescription": "Kindly check the TagOwner parameter input to follow valid email address convention.",
   "Description": "Tag which will be attached to all possible resources created by this stack-template."
  },
  "S3Bucket" : {
   "Description" : "The name of S3 Bucket that contains the packaged Lambda source code",
   "Default" : "aws-f5-singapore-hc-lambda-bucket",
   "Type" : "String"
  },
  "S3Key" : {
   "Description" : "The name of the ZIP package",
   "Type" : "String",
   "Default" : "RandomWordCB.zip"
  },
  "ModuleName" : {
   "Description" : "The name of the Node.JS file, inside the ZIP file",
   "Type" : "String",
   "Default" : "RandomWordCB"
  },
  "UserInput": {
   "Description": "A User Input to the Lambda Function. Can be Safely Ignored for this Sample Template.",
   "Default" : "Random User Input",
   "Type": "String"
  }
 },

 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [
    {
     "Label": {
      "default": "CloudFormation Stack Tag Parameters"
     },
     "Parameters": [
      "TagPreFix",
      "TagOwnerEmail"
     ]
    },
    {
     "Label": {
      "default": "Lambda Function Parameters"
     },
     "Parameters": [
      "S3Bucket",
      "S3Key",
      "ModuleName"
     ]
    },
    {
     "Label": {
      "default": "Other Parameters"
     },
     "Parameters": [
      "UserInput"
     ]
    }
   ],
   "ParameterLabels": {
    "TagPreFix": {
     "default": "PreFix for Name Tags"
    },
    "TagOwnerEmail": {
     "default": "Email Address of the Owner of all resources created by this CloudFormation Stack"
    },
    "S3Bucket": {
     "default": "AWS S3 Bucket where the Lambda Source Code is Located"
    },
    "S3Key": {
     "default": "The Lambda Source Code's ZIP File"
    },
    "ModuleName": {
     "default": "The Main Node.JS File, within the ZIP File, which Contains the Main Handler Function"
    },
    "UserInput": {
     "default": "User's Input"
    }
   }
  }
 },

 "Resources": {
  "VPC": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "EnableDnsSupport": "true",
    "EnableDnsHostnames": "true",
    "CidrBlock": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, "0.0/16" ] ] },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "VPC" ] ] } }, { "Key": "Owner", "Value": { "Ref": "TagOwnerEmail" } } ]
   }
  },
  "FlowLog": {
   "Type": "AWS::EC2::FlowLog",
   "DependsOn": [ "VPC" , "FlowLogRole" ],
   "Properties": {
    "DeliverLogsPermissionArn": {
     "Fn::GetAtt": [
      "FlowLogRole",
      "Arn"
     ]
    },
    "LogGroupName": "FlowLogGroup",
    "ResourceId": {
     "Ref": "VPC"
    },
    "ResourceType": "VPC",
    "TrafficType": "ALL"
   }
  },
  "FlowLogRole": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "vpc-flow-logs.amazonaws.com"
        ]
       },
       "Action": [
        "sts:AssumeRole"
       ]
      }
     ]
    },
    "Policies": [
     {
      "PolicyName": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "FlowLogPolicy" ] ] },
      "PolicyDocument": {
       "Version": "2012-10-17",
       "Statement": [
        {
         "Effect": "Allow",
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs"
         ],
         "Resource": "*"
        }
       ]
      }
     }
    ],
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "FlowLogRole" ] ] } }, { "Key": "Owner", "Value": { "Ref": "TagOwnerEmail" } } ]
   }
  },
  "NodesSubnet": {
   "Type": "AWS::EC2::Subnet",
   "DependsOn": [ "VPC" ],
   "Properties": {
    "VpcId": { "Ref": "VPC" },
    "AvailabilityZone": { "Fn::Select": [ "0", { "Fn::GetAZs": { "Ref": "AWS::Region" } } ] },
    "MapPublicIpOnLaunch": "true",
    "CidrBlock": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "Nodes", "InFix" ] }, "0/24" ] ] },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "NodesSubnet" ] ] } }, { "Key": "Owner", "Value": { "Ref": "TagOwnerEmail" } } ]
   }
  },
  "GatewaySubnet": {
   "Type": "AWS::EC2::Subnet",
   "DependsOn": [ "VPC" ],
   "Properties": {
    "VpcId": { "Ref": "VPC" },
    "AvailabilityZone": { "Fn::Select": [ "0", { "Fn::GetAZs": { "Ref": "AWS::Region" } } ] },
    "MapPublicIpOnLaunch": "true",
    "CidrBlock": { "Fn::Join": [ ".", [ { "Fn::FindInMap": [ "IPAddress", "VPC", "PreFix" ] }, { "Fn::FindInMap": [ "IPAddress", "Gateway", "InFix" ] }, "0/24" ] ] },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "GatewaySubnet" ] ] } }, { "Key": "Owner", "Value": { "Ref": "TagOwnerEmail" } } ]
   }
  },
  "InternetGateway": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "InternetGateway" ] ] } }, { "Key": "Owner", "Value": { "Ref": "TagOwnerEmail" } } ]
   }
  },
  "VPCGatewayAttachment": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "DependsOn": [ "VPC", "InternetGateway" ],
   "Properties": {
    "VpcId": { "Ref": "VPC" },
    "InternetGatewayId": { "Ref": "InternetGateway" }
   }
  },
  "NATGatewayEIP": {
   "Type": "AWS::EC2::EIP",
   "DependsOn": [ "VPC" , "VPCGatewayAttachment" ],
   "Properties": {
    "Domain": "vpc",
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "NATGatewayEIP" ] ] } }, { "Key": "Owner", "Value": { "Ref": "TagOwnerEmail" } } ]
   }
  },
  "NATGateway" : {
   "Type" : "AWS::EC2::NatGateway",
   "DependsOn": [ "NATGatewayEIP", "NodesSubnet" ],
   "Properties" : {
    "AllocationId" : { "Fn::GetAtt" : [ "NATGatewayEIP", "AllocationId" ] },
    "SubnetId" : { "Ref" : "GatewaySubnet" },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "NATGateway" ] ] } }, { "Key": "Owner", "Value": { "Ref": "TagOwnerEmail" } } ]
   }
  },
  "NodesRouteTable": {
   "Type": "AWS::EC2::RouteTable",
   "DependsOn": [ "VPC" ],
   "Properties": {
    "VpcId": { "Ref": "VPC" },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "NodesRouteTable" ] ] } }, { "Key": "Owner", "Value": { "Ref": "TagOwnerEmail" } } ]
   }
  },
  "NodesRoute": {
   "Type": "AWS::EC2::Route",
   "DependsOn": [ "NodesRouteTable", "NATGateway" , "VPCGatewayAttachment" ],
   "Properties": {
    "RouteTableId": { "Ref": "NodesRouteTable" },
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId" : { "Ref" : "NATGateway" }
   }
  },
  "NodesSubnetRouteTableAssociation": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "DependsOn": [ "NodesSubnet", "NodesRouteTable" ],
   "Properties": {
    "SubnetId": { "Ref": "NodesSubnet" },
    "RouteTableId": { "Ref": "NodesRouteTable" }
   }
  },
  "NodesNetworkAcL": {
   "Type": "AWS::EC2::NetworkAcl",
   "DependsOn": [ "VPC" ],
   "Properties": {
    "VpcId": { "Ref": "VPC" },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "NodesNetworkAcL" ] ] } }, { "Key": "Owner", "Value": { "Ref": "TagOwnerEmail" } } ]
   }
  },
  "InboundTCPNodesNetworkAcLEntry": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "DependsOn": [ "NodesNetworkAcL" ],
   "Properties": {
    "NetworkAclId": { "Ref": "NodesNetworkAcL" },
    "RuleNumber": "100",
    "Protocol": "6",
    "RuleAction": "allow",
    "Egress": "false",
    "CidrBlock": "0.0.0.0/0",
    "PortRange": { "From": "0", "To": "65535" }
   }
  },
  "InboundUDPNodesNetworkAcLEntry": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "DependsOn": [ "NodesNetworkAcL" ],
   "Properties": {
    "NetworkAclId": { "Ref": "NodesNetworkAcL" },
    "RuleNumber": "200",
    "Protocol": "17",
    "RuleAction": "allow",
    "Egress": "false",
    "CidrBlock": "0.0.0.0/0",
    "PortRange": { "From": "0", "To": "65535" }
   }
  },
  "InboundICMPNodesNetworkAcLEntry": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "DependsOn": [ "NodesNetworkAcL" ],
   "Properties": {
    "NetworkAclId": { "Ref": "NodesNetworkAcL" },
    "RuleNumber": "300",
    "Protocol": "1",
    "Icmp": { "Code": "-1", "Type": "-1" },
    "RuleAction": "allow",
    "Egress": "false",
    "CidrBlock": "0.0.0.0/0"
   }
  },
  "OutboundTCPNodesNetworkAcLEntry": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "DependsOn": [ "NodesNetworkAcL" ],
   "Properties": {
    "NetworkAclId": { "Ref": "NodesNetworkAcL" },
    "RuleNumber": "100",
    "Protocol": "6",
    "RuleAction": "allow",
    "Egress": "true",
    "CidrBlock": "0.0.0.0/0",
    "PortRange": { "From": "0", "To": "65535" }
   }
  },
  "OutboundUDPNodesNetworkAcLEntry": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "DependsOn": [ "NodesNetworkAcL" ],
   "Properties": {
    "NetworkAclId": { "Ref": "NodesNetworkAcL" },
    "RuleNumber": "200",
    "Protocol": "17",
    "RuleAction": "allow",
    "Egress": "true",
    "CidrBlock": "0.0.0.0/0",
    "PortRange": { "From": "0", "To": "65535" }
   }
  },
  "OutboundICMPNodesNetworkAcLEntry": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "DependsOn": [ "NodesNetworkAcL" ],
   "Properties": {
    "NetworkAclId": { "Ref": "NodesNetworkAcL" },
    "RuleNumber": "300",
    "Protocol": "1",
    "Icmp": { "Code": "-1", "Type": "-1" },
    "RuleAction": "allow",
    "Egress": "true",
    "CidrBlock": "0.0.0.0/0"
   }
  },
  "NodesSubnetNetworkAcLAssociation": {
   "Type": "AWS::EC2::SubnetNetworkAclAssociation",
   "DependsOn": [ "NodesSubnet", "NodesNetworkAcL" ],
   "Properties": {
    "SubnetId": { "Ref": "NodesSubnet" },
    "NetworkAclId": { "Ref": "NodesNetworkAcL" }
   }
  },
  "NodesSecurityGroup": {
   "Type": "AWS::EC2::SecurityGroup",
   "DependsOn": [ "VPC" ],
   "Properties": {
    "GroupDescription": "Security Group for Nodes",
    "VpcId": { "Ref": "VPC" },
    "SecurityGroupEgress": [ { "IpProtocol": "-1", "CidrIp": "0.0.0.0/0" } ],
    "SecurityGroupIngress": [ { "IpProtocol": "-1", "CidrIp": "0.0.0.0/0" } ],
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "NodesSecurityGroup" ] ] } }, { "Key": "Owner", "Value": { "Ref": "TagOwnerEmail" } } ]
   }
  },
  "GatewayRouteTable": {
   "Type": "AWS::EC2::RouteTable",
   "DependsOn": [ "VPC" ],
   "Properties": {
    "VpcId": { "Ref": "VPC" },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "GatewayRouteTable" ] ] } }, { "Key": "Owner", "Value": { "Ref": "TagOwnerEmail" } } ]
   }
  },
  "GatewayRoute": {
   "Type": "AWS::EC2::Route",
   "DependsOn": [ "GatewayRouteTable", "NATGateway" , "VPCGatewayAttachment" ],
   "Properties": {
    "RouteTableId": { "Ref": "GatewayRouteTable" },
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": { "Ref": "InternetGateway" }
   }
  },
  "GatewaySubnetRouteTableAssociation": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "DependsOn": [ "GatewaySubnet", "GatewayRouteTable" ],
   "Properties": {
    "SubnetId": { "Ref": "GatewaySubnet" },
    "RouteTableId": { "Ref": "GatewayRouteTable" }
   }
  },
  "GatewayNetworkAcL": {
   "Type": "AWS::EC2::NetworkAcl",
   "DependsOn": [ "VPC" ],
   "Properties": {
    "VpcId": { "Ref": "VPC" },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "GatewayNetworkAcL" ] ] } }, { "Key": "Owner", "Value": { "Ref": "TagOwnerEmail" } } ]
   }
  },
  "InboundTCPGatewayNetworkAcLEntry": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "DependsOn": [ "GatewayNetworkAcL" ],
   "Properties": {
    "NetworkAclId": { "Ref": "GatewayNetworkAcL" },
    "RuleNumber": "100",
    "Protocol": "6",
    "RuleAction": "allow",
    "Egress": "false",
    "CidrBlock": "0.0.0.0/0",
    "PortRange": { "From": "0", "To": "65535" }
   }
  },
  "InboundUDPGatewayNetworkAcLEntry": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "DependsOn": [ "GatewayNetworkAcL" ],
   "Properties": {
    "NetworkAclId": { "Ref": "GatewayNetworkAcL" },
    "RuleNumber": "200",
    "Protocol": "17",
    "RuleAction": "allow",
    "Egress": "false",
    "CidrBlock": "0.0.0.0/0",
    "PortRange": { "From": "0", "To": "65535" }
   }
  },
  "InboundICMPGatewayNetworkAcLEntry": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "DependsOn": [ "GatewayNetworkAcL" ],
   "Properties": {
    "NetworkAclId": { "Ref": "GatewayNetworkAcL" },
    "RuleNumber": "300",
    "Protocol": "1",
    "Icmp": { "Code": "-1", "Type": "-1" },
    "RuleAction": "allow",
    "Egress": "false",
    "CidrBlock": "0.0.0.0/0"
   }
  },
  "OutboundTCPGatewayNetworkAcLEntry": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "DependsOn": [ "GatewayNetworkAcL" ],
   "Properties": {
    "NetworkAclId": { "Ref": "GatewayNetworkAcL" },
    "RuleNumber": "100",
    "Protocol": "6",
    "RuleAction": "allow",
    "Egress": "true",
    "CidrBlock": "0.0.0.0/0",
    "PortRange": { "From": "0", "To": "65535" }
   }
  },
  "OutboundUDPGatewayNetworkAcLEntry": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "DependsOn": [ "GatewayNetworkAcL" ],
   "Properties": {
    "NetworkAclId": { "Ref": "GatewayNetworkAcL" },
    "RuleNumber": "200",
    "Protocol": "17",
    "RuleAction": "allow",
    "Egress": "true",
    "CidrBlock": "0.0.0.0/0",
    "PortRange": { "From": "0", "To": "65535" }
   }
  },
  "OutboundICMPGatewayNetworkAcLEntry": {
   "Type": "AWS::EC2::NetworkAclEntry",
   "DependsOn": [ "GatewayNetworkAcL" ],
   "Properties": {
    "NetworkAclId": { "Ref": "GatewayNetworkAcL" },
    "RuleNumber": "300",
    "Protocol": "1",
    "Icmp": { "Code": "-1", "Type": "-1" },
    "RuleAction": "allow",
    "Egress": "true",
    "CidrBlock": "0.0.0.0/0"
   }
  },
  "GatewaySubnetNetworkAcLAssociation": {
   "Type": "AWS::EC2::SubnetNetworkAclAssociation",
   "DependsOn": [ "GatewaySubnet", "GatewayNetworkAcL" ],
   "Properties": {
    "SubnetId": { "Ref": "GatewaySubnet" },
    "NetworkAclId": { "Ref": "GatewayNetworkAcL" }
   }
  },
  "LambdaExecutionRole": {
   "Type": "AWS::IAM::Role",
   "DependsOn": [ "NodesSecurityGroup", "NodesSubnet" , "NodesRoute" , "FlowLog" ],
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "lambda.amazonaws.com"
        ]
       },
       "Action": [
        "sts:AssumeRole"
       ]
      }
     ]
    },
    "Policies": [
     {
      "PolicyName": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "LambdaExecutionPolicy" ] ] },
      "PolicyDocument": {
       "Version": "2012-10-17",
       "Statement": [
        {
         "Effect": "Allow",
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "ec2:CreateNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DeleteNetworkInterface",
          "ec2:AssignPrivateIpAddresses",
          "ec2:UnassignPrivateIpAddresses",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcs"
         ],
         "Resource": "*"
        }
       ]
      }
     }
    ],
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "LambdaExecutionRole" ] ] } }, { "Key": "Owner", "Value": { "Ref": "TagOwnerEmail" } } ]
   }
  },
  "RandomWordInterface": {
   "Type": "Custom::RandomWordInterface",
   "DependsOn": [ "RandomWordFunction" ],
   "Properties": {
    "ServiceToken": { "Fn::GetAtt" : ["RandomWordFunction", "Arn"] },
    "SystemInput": { "Ref": "AWS::Region" },
    "UserInput": { "Ref": "UserInput" },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "RandomWordInterface" ] ] } }, { "Key": "Owner", "Value": { "Ref": "TagOwnerEmail" } } ]
   }
  },
  "RandomWordFunction": {
   "Type": "AWS::Lambda::Function",
   "DependsOn": [ "LambdaExecutionRole", "NodesSecurityGroup", "NodesSubnet" , "NodesRoute" , "FlowLog" ],
   "Properties": {
    "Code": {
     "S3Bucket": { "Ref": "S3Bucket" },
     "S3Key": { "Ref": "S3Key" }
    },
    "Handler": { "Fn::Join" : [ "", [{ "Ref": "ModuleName" },".handler"] ] },
    "Runtime": "nodejs14.x",
    "Timeout": "30",
    "Role": {
     "Fn::GetAtt": [
      "LambdaExecutionRole",
      "Arn"
     ]
    },
    "VpcConfig": {
     "SecurityGroupIds" : [ { "Ref": "NodesSecurityGroup" } ],
     "SubnetIds" : [ { "Ref": "NodesSubnet" } ]
    },
    "Tags": [ { "Key": "Name", "Value": { "Fn::Join": [ "_", [ { "Ref": "TagPreFix" }, { "Ref": "AWS::StackName" }, "RandomWordFunction" ] ] } }, { "Key": "Owner", "Value": { "Ref": "TagOwnerEmail" } } ]
   }
  }
 },
 "Outputs": {
  "RandomWordFunction": {
   "Value": { "Ref": "RandomWordFunction" },
   "Description": "Look at \"CloudWatch > Log Groups > /aws/lambda/[this-value-reference]\" for the logs of this Lambda Function"
  },
  "SystemInput": {
   "Value": { "Fn::GetAtt": [ "RandomWordInterface", "SystemInput" ] },
   "Description": "One of the inputs into the Lambda Function (labelled as \"SystemInput\", value is AWS Region)"
  },
  "UserInput": {
   "Value": { "Fn::GetAtt": [ "RandomWordInterface", "UserInput" ] },
   "Description": "One of the inputs into the Lambda Function (labelled as \"UserInput\")"
  },
  "Reason": {
   "Value": { "Fn::GetAtt": [ "RandomWordInterface", "Reason" ] },
   "Description": "One of the results of the Lambda Function (labelled as \"Reason\")"
  },
  "Result": {
   "Value": { "Fn::GetAtt": [ "RandomWordInterface", "Result" ] },
   "Description": "The other result of the Lambda Function (labelled as \"Result\")"
  }
 }
}